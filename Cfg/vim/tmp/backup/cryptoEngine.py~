#!/usr/bin/env python
# -*- coding: utf8 -*-

from base64 import b64encode, b64decode
from Crypto.Hash import SHA512, MD5
from Crypto.Cipher import AES
from Crypto.Random import random
from Crypto import Random

import string

class cryptoEngine:
    """
    Small class to encapsulate some crypto related functions.
    """
    
    def __init__(self, password):
        self.key = SHA512.new(password.encode()).digest()[:32]
        self.blockSize = AES.block_size
    
    def aesEncrypt(self, plainText):
        plainText = self._pad(plainText)
        iv = Random.new().read(self.blockSize)
        
        engine = AES.new(self.key, AES.MODE_CBC, iv)
        
        return b64encode(iv + engine.encrypt(plainText))
    
    def aesDecrypt(self, cipherText):
        cipherText = b64decode(cipherText)
        iv = cipherText[:self.blockSize]
    
        engine = AES.new(self.key, AES.MODE_CBC, iv)
    
        try:
            return self._unpad(engine.decrypt(cipherText[self.blockSize:])).decode('utf-8')
        except UnicodeDecodeError:
            return ''
    
    def _pad(self, s):
        return s + (self.blockSize - len(s) % self.blockSize) * chr(self.blockSize - len(s) % self.blockSize)
    
    @staticmethod
    def _unpad(s):
        return s[:-ord(s[len(s)-1:])]
        
    def passwordGenerator(self, n, minLength, maxLenght):
        alphabet = string.ascii_letters + string.punctuation + string.digits
        return [''.join(random.choice(alphabet) for _ in range(random.randint(minLength, maxLenght))) for _ in range(n)]
    
    def hash(self, plainText):
        return SHA512.new(plainText.encode('utf-8')).hexdigest()
    
    def hashCompare(self, plainText, hashedText):
        return SHA512.new(plainText.encode('utf-8')).hexdigest() != hashedText
